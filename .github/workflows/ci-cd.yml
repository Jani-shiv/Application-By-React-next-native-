name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: reiki_healing_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📦 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🔍 Debug test discovery
      run: |
        echo "🔍 Debugging Jest test discovery..."
        echo "📂 Current directory: $(pwd)"
        echo "📁 Backend directory contents:"
        ls -la backend/
        echo "📁 Backend src directory contents:"
        ls -la backend/src/
        echo "🧪 Backend tests directory contents:"
        ls -la backend/src/tests/ || echo "❌ Tests directory not found"
        echo "📄 Test files found:"
        find backend/src -name "*.test.js" -o -name "*.spec.js" || echo "❌ No test files found"
        echo "⚙️ Jest configuration:"
        cat backend/jest.config.json || echo "❌ Jest config not found"
        echo "🎯 Jest dry run:"
        cd backend && npx jest --listTests || echo "❌ Jest listTests failed"

    - name: 🧪 Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: reiki_healing_test
        JWT_SECRET: test_secret
        JWT_REFRESH_SECRET: test_refresh_secret

    - name: 🔍 Check backend linting
      working-directory: ./backend
      run: npm run lint --if-present

  # Frontend Tests
  frontend-tests:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: web-app/package-lock.json

    - name: 📦 Install frontend dependencies
      working-directory: ./web-app
      run: npm ci

    - name: 🧪 Run frontend tests
      working-directory: ./web-app
      run: npm test --if-present

    - name: 🏗️ Build frontend
      working-directory: ./web-app
      run: npm run build

    - name: 🔍 Check frontend linting
      working-directory: ./web-app
      run: npm run lint --if-present

  # Mobile App Tests
  mobile-tests:
    name: 📱 Mobile App Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: mobile-app/package-lock.json

    - name: 📦 Install mobile dependencies
      working-directory: ./mobile-app
      run: npm ci

    - name: 🧪 Run mobile tests
      working-directory: ./mobile-app
      run: npm test --if-present

    - name: 🔍 Check mobile linting
      working-directory: ./mobile-app
      run: npm run lint --if-present

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: 🔍 Backend Security Audit
      working-directory: ./backend
      run: |
        npm ci
        npm audit --audit-level moderate

    - name: 🔍 Frontend Security Audit
      working-directory: ./web-app
      run: |
        npm ci
        npm audit --audit-level moderate

    - name: 🔍 Mobile Security Audit
      working-directory: ./mobile-app
      run: |
        npm ci
        npm audit --audit-level moderate

  # Documentation Check
  documentation-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ✅ Check README exists
      run: test -f README.md

    - name: ✅ Check CONTRIBUTING exists
      run: test -f CONTRIBUTING.md

    - name: ✅ Check LICENSE exists
      run: test -f LICENSE

    - name: 🔍 Check for broken links (optional)
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        check-modified-files-only: 'yes'

  # Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests, security-audit, documentation-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: 🏗️ Build applications
      run: |
        # Build backend (if needed)
        cd backend && npm ci
        
        # Build frontend
        cd ../web-app && npm ci && npm run build
        
        # Prepare mobile build (if needed)
        cd ../mobile-app && npm ci

    - name: 🚀 Deploy notification
      run: |
        echo "🎉 Deployment successful!"
        echo "✅ Backend: Ready for deployment"
        echo "✅ Frontend: Built and ready"
        echo "✅ Mobile: Prepared for app store"

  # Auto-merge dependabot PRs (optional)
  auto-merge:
    name: 🤖 Auto-merge Dependabot
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests, security-audit]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'

    steps:
    - name: 🤖 Enable auto-merge for Dependabot PRs
      run: gh pr merge --auto --merge "$PR_URL"
      env:
        PR_URL: ${{github.event.pull_request.html_url}}
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
